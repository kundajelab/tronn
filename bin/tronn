#!/usr/bin/env python

"""Description: TRONN main executable
"""

import os
import sys
import logging
import argparse
import glob
import pkg_resources
import json


def parse_args():
    """Prepare argument parser. Main subcommands are set up here first
    """
    parser = argparse.ArgumentParser(
        description='TRONN: Transcriptional Regulation Optimized Neural Nets')
    subparsers = parser.add_subparsers(dest='subcommand_name')

    # command for preprocessing data
    add_preprocess_parser(subparsers)
    
    # command for training
    add_train_parser(subparsers)

    # command for evaluation
    add_evaluate_parser(subparsers)

    # command for prediction/scanning
    add_predict_parser(subparsers)

    # command for extracting importances
    add_importances_parser(subparsers)

    # command for making motifs with wkm
    add_wkm_parser(subparsers)

    # command for grouping motifs
    add_bagmotifs_parser(subparsers)

    # command for in silico mutagenesis
    add_ism_parser(subparsers)

    # TODO(dk) add in a function to do
    # all grammar work (group motifs, ISM)
    
    # load data jsons
    #load_data_files(parser)

    # parse args
    args = parser.parse_args()

    return args


def load_data_files(parser):
    """Load all json files in so that we have handles on all data
    """
    json_files = glob.glob(
        pkg_resources.resource_filename('tronn', 'data/*.json'))
    data_files = {}
    
    for json_file in json_files:
        key_name = os.path.basename(json_file).split('.json')[0]
        with open(json_file, 'r') as fp:
            parser.add_argument(
                "--{}".format(key_name),
                type=dict, default=json.load(fp),
                help="Support data files")

    return


# TODO(dk) fix this to add more options to model param setup
def add_model_params(args):
    """Add model configs
    """
    # parse model configs
    model_config = {}
    model_config['name'] = args.model[0]
    for model_arg in args.model[1:]:
        if '=' in model_arg:
            name, value = model_arg.split('=', 1)
            model_config[name] = eval(value)
        else:
            model_config[model_arg] = True
    args.model = model_config

    return 


def add_output_options(parser, out_dir="./"):
    """Add an output directory and prefix if desired
    """
    parser.add_argument(
        "-o", "--out_dir", dest="out_dir", type=str,
        default=out_dir,
        help = "Output directory (default: current)")
    parser.add_argument(
        '--prefix', required=True,
        help='prefix to attach onto file names')

    return


def add_hdf5_data_options(parser):
    """Add data options for hdf5 files
    """
    parser.add_argument(
        "--data_dir", required=True,
        help="hdf5 file directory")
    parser.add_argument(
        "--tasks", nargs="+", default=[], type=int,
        help="tasks to train on (default is all)")
    
    return


def add_preprocess_parser(subparsers):
    """Add data generation function argument parser
    """
    argparser_preprocess = subparsers.add_parser(
        "preprocess",
        help="Preprocess data into TRONN formats")

    # group for input files
    group_input = argparser_preprocess.add_argument_group(
        "Input files and folders")
    group_input.add_argument(
        "--labels", nargs='+', required=True,
        help='list of label file peak sets (BED/narrowPeak)')
    load_data_files(group_input)

    # group for options
    group_opts = argparser_preprocess.add_argument_group(
        "Data generation options")
    group_opts.add_argument(
        "--rc",
        help='Reverse complement')
    group_opts.add_argument(
        "--univ_neg_num", default=200000,
        help='number of universal negatives to grab from univ DHS regions')
    group_opts.add_argument(
        "--parallel", default=12, type=int,
        help='Number of parallel threads to use')
    group_opts.add_argument(
        "--kmerize", action='store_true',
        help="generate kmer datasets also")
    
    # group for output files
    group_output = argparser_preprocess.add_argument_group(
        "Output files and folders")
    add_output_options(group_output, out_dir="dataset")

    return


def add_train_parser(subparsers):
    """Add argument parser for training
    """
    argparser_train = subparsers.add_parser(
        "train",
        help="Train a TRONN model")
    
    # group for input files
    group_input = argparser_train.add_argument_group(
        "Input files and folders")
    add_hdf5_data_options(group_input)
    group_input.add_argument(
        '--restore_model_dir', default=None,
        help='restore from last checkpoint')
    group_input.add_argument(
        '--transfer_model_dir', default=None,
        help='directory with same model to transfer') 
    
    # group for model
    group_model = argparser_train.add_argument_group(
        "Model definition")
    group_model.add_argument(
        '--model', nargs='+', required=True,
        help='choose model and provide configs')
    
    # group for parameters
    group_params = argparser_train.add_argument_group(
        "Training hyperparameters")
    group_params.add_argument(
        '--epochs', default=20, type=int,
        help='number of epochs')
    group_params.add_argument(
        '--batch_size', default=128, type=int,
        help='batch size')
    group_params.add_argument(
        '--metric', default='mean_auprc', type=str,
        help='metric to use for early stopping')
    group_params.add_argument(
        '--patience', default=2, type=int,
        help='metric to use for early stopping')
    group_params.add_argument(
        '--finetune_tasks', nargs="+", default=[],
        help="tasks to finetune")

    # group for output files
    group_output = argparser_train.add_argument_group(
        "Output files and folders")
    add_output_options(group_output, out_dir='model')

    return


def add_trained_nn_model_options(parser, required=True):
    """Set up standard necessary args for a trained NN model
    """
    parser.add_argument(
        '--model', nargs='+', required=required,
        help='choose model and provide configs')
    parser.add_argument(
        '--model_dir', required=required,
        help='restore from last checkpoint')
    
    return


def add_model_picker(parser):
    """Set up model picker arguments. This is used 
    for prediction/evaluation functions where you might want to test
    motif, grammar, or the full neural net
    """
    parser.add_argument(
        "--model_type", required=True, default="nn",
        help="what kind of model: nn, motif, grammar")
    
    # arguments for nn model
    add_trained_nn_model_options(parser, required=False)
    
    # arguments for motif model
    parser.add_argument(
        '--pwm_files', nargs="+", default=None,
        help='list of PWM files (all will be loaded and run')

    # arguments for grammar model
    parser.add_argument(
        '--grammar_files', nargs="+",
        help='list of grammar files (all will be loaded and run')
    
    return


def add_evaluate_parser(subparsers):
    """Add argument parser for test-time evaluation
    """
    argparser_test = subparsers.add_parser(
        "evaluate",
        help="Evaluate TRONN model")

    # group for input files
    group_input = argparser_test.add_argument_group(
        "Input files and folders")
    add_hdf5_data_options(group_input)

    # group for model
    group_model = argparser_test.add_argument_group(
        "Model definition")
    add_model_picker(group_model)
    
    # group for parameters
    group_params = argparser_test.add_argument_group(
        "Parameters")
    group_params.add_argument(
    	"--num_evals", default=1000, type=int,
    	help="Number of steps to run for prediction")
    group_params.add_argument(
    	"--merge_regions", action="store_true",
    	help="Produce files where values are merged")
    group_params.add_argument(
        '--batch_size', default=128, type=int,
        help='batch size')
    group_params.add_argument(
        "--single_task", default=None, type=int,
        help="Evaluate ALL predictions on ONE task (give idx here)")
    
    # group for output files
    group_output = argparser_test.add_argument_group(
        "Output files and folders")
    add_output_options(group_output, out_dir='evaluation')
    
    return


def add_predict_parser(subparsers):
    """Add argument parser for predicting with trained models
    """
    argparser_predict = subparsers.add_parser(
        "predict",
        help="Predict with trained model")

    # group for input files
    group_input = argparser_predict.add_argument_group(
        "Input files and folders")
    add_hdf5_data_options(group_input)
    
    # group for model
    group_model = argparser_predict.add_argument_group(
        "Model definition")
    add_model_picker(group_model)
    
    # group for parameters
    group_params = argparser_predict.add_argument_group(
        "Parameters")
    group_params.add_argument(
    	"--num_evals", default=1000, type=int,
    	help="Number of steps to run for prediction")
    group_params.add_argument(
    	"--merge_regions", action="store_true",
    	help="Produce files where values are merged")
    group_params.add_argument(
        '--batch_size', default=128, type=int,
        help='batch size')
    group_params.add_argument(
        "--single_task", default=None, type=int,
        help="Get ALL predictions on ONE task (give idx here)")

    # group for output files
    group_output = argparser_predict.add_argument_group(
        "Output files and folders")
    add_output_options(group_output, out_dir='prediction')
    
    return


def add_importances_parser(subparsers):
    """Add argument parser for getting feature importances
    """
    argparser_importances = subparsers.add_parser(
        "extractimportances",
        help="Get basepair level importance scores")

    # group for input files
    group_input = argparser_importances.add_argument_group(
    	"Input files and folders")
    add_hdf5_data_options(group_input)

    # group for model
    group_model = argparser_importances.add_argument_group(
        "Model definition")
    add_trained_nn_model_options(group_model)

    # group for parameters
    group_params = argparser_importances.add_argument_group(
        "Interpretation hyperparameters")
    group_params.add_argument(
        '--batch_size', default=128, type=int,
        help='batch size')
    group_params.add_argument(
        '--sample_size', default=220000, type=int,
        help='number of regions to get importance scores')

    # group for output files
    group_output = argparser_importances.add_argument_group(
        "Output files and folders")
    add_output_options(group_output, out_dir="importances")
    group_output.add_argument(
        '--tmp_dir', default='importances_tmp',
        help='temporary scratch directory')
    group_output.add_argument(
        '--plot_samples', action='store_true',
        help='plot some sample sequences weighted by importance scores')
    
    return

def add_wkm_parser(subparsers):
    """Add argument parser for making motifs from weighted kmers
    """
    argparser_wkm = subparsers.add_parser(
        "makemotifs",
        help="Make motifs from weighted kmers")

    # group for input files
    group_input = argparser_wkm.add_argument_group(
    	"Input files and folders")
    group_input.add_argument(
        "--importance_files", nargs="+", required=True,
        help="Importance files (ideally thresholded) to extract kmers")
    
    # group for output files
    group_output = argparser_wkm.add_argument_group(
        "Output files and folders")
    add_output_options(group_output, out_dir="motifs")
    
    return


def add_bagmotifs_parser(subparsers):
    """Add argument parser for scanning motifs and clustering into motif bags
    """
    argparser_bagmotifs = subparsers.add_parser(
        "bagmotifs",
        help="Cluster motifs into groups")

    # group for input files
    group_input = argparser_bagmotifs.add_argument_group(
    	"Input files and folders")
    group_input.add_argument(
        "--importance_file", required=True,
        help="Importance files (ideally thresholded) to extract kmers")
    group_input.add_argument(
    	"--task_num", required=True, type=int,
    	help="Task number currently running (to get correct importance scores)")
    group_input.add_argument(
        "--motif_file", required=True,
        help="motif file for scanning")

    # group for parameters
    group_params = argparser_bagmotifs.add_argument_group(
        "Interpretation hyperparameters")
    group_params.add_argument(
        '--batch_size', default=128, type=int,
        help='batch size')
    
    # group for output files
    group_output = argparser_bagmotifs.add_argument_group(
        "Output files and folders")
    add_output_options(group_output, out_dir="motifclusters")
    
    return


def add_ism_parser(subparsers):
    """Add argument parser for extracting dependencies using
    in silico mutagenesis (ISM)
    """
    argparser_ism = subparsers.add_parser(
        "ism",
        help="Extract dependencies using ISM")

    # group for input files
    group_input = argparser_ism.add_argument_group(
    	"Input files and folders")
    group_input.add_argument(
        "--bed_dir", required=True,
        help="Directory of BED files")
    group_input.add_argument(
    	"--motif_sets_file", required=True,
    	help="Motif sets file")
    group_input.add_argument(
        "--pwm_file", required=True,
        help="file of PWMs")
    group_input.add_argument(
        '--tasks', nargs='+', default=[], type=int,
        help='tasks over which to get importances')
    load_data_files(group_input)

    # group for model
    group_model = argparser_ism.add_argument_group(
        "Model definition")
    add_trained_nn_model_options(group_model)

    # group for params
    group_params = argparser_ism.add_argument_group(
        "Interpretation hyperparameters")
    group_params.add_argument(
        '--batch_size', default=1, type=int,
        help='batch size')

    # group for output files
    group_output = argparser_ism.add_argument_group(
        "Output files and folders")
    add_output_options(group_output, out_dir="ism")

    return


def add_makegrammar_parser(subparsers):
    """
    """
    argparser_grammars = subparsers.add_parser(
        "makegrammar",
        help="Get grammars")

    # TODO(dk) fix this


    return


def add_baseline_parser(subparsers):
    """Add train baseline function argument parser
    """
    argparser_baseline = subparsers.add_parser("baseline", help="Run baseline model")

    # group for input files
    group_input = argparser_baseline.add_argument_group("Input files and folders")
    group_input.add_argument('--data_dir', help='Data directory of kmer hdf5 files')

    # group for parameters
    group_params = argparser_baseline.add_argument_group("Training hyperparameters")
    group_params.add_argument('--batch_size', default=128, type=int, help='batch size')

    # group for output files
    group_output = argparser_baseline.add_argument_group("Output files and folders")
    add_out_dir_option(group_output, default='log_rf')
    group_output.add_argument('--prefix', default='tronn', help='prefix to attach onto file names')

    return


def track_runs(args):
    """track command and github commit
    """
    # keeps track of restores (or different commands) in folder
    num_restores = len(glob.glob('{0}/{1}.command'.format(args.out_dir, args.subcommand_name)))
    logging_file = '{0}/{1}.command_{2}.log'.format(args.out_dir, args.subcommand_name, num_restores)
    
    # track github commit
    git_repo_path = os.path.dirname(os.path.realpath(__file__))
    os.system('echo "commit:" > {0}'.format(logging_file))
    os.system('git -C {0} rev-parse HEAD >> {1}'.format(git_repo_path, logging_file))
    os.system('echo "" >> {0}'.format(logging_file))
    
    # write out the command
    with open(logging_file, 'a') as f:
        f.write(' '.join(sys.argv)+'\n\n')
    
    return logging_file


def main():
    """Main function for running TRoNN functions
    """
    args = parse_args()
    print "out_dir: %s" % args.out_dir
    os.system("mkdir -p {}".format(args.out_dir))
    logging_file = track_runs(args)
    #logging.basicConfig(filename=logging_file, level=logging.INFO)

    # get subcommand run function and run
    subcommand  = args.subcommand_name

    if subcommand == "preprocess":
        from tronn.preprocess import run
        run(args)
    elif subcommand == 'train':
        add_model_params(args)
        print 'model args: %s' % args.model
        from tronn.run_train import run
        run(args)
    elif subcommand == "evaluate":
        if args.model_type == "nn":
            add_model_params(args)
        print "model args: %s" % args.model
        from tronn.run_evaluate import run
        run(args)
    elif subcommand == "predict":
    	if args.model_type == "nn":
            add_model_params(args)
            print "model args: %s" % args.model
        from tronn.run_predict import run
        run(args)
    elif subcommand == "extractimportances":
        add_model_params(args)
        print 'model args: %s' % args.model
        from tronn.run_extractimportances import run
        run(args)
    elif subcommand == "makemotifs":
        from tronn.run_wkm import run
        run(args)
    elif subcommand == "bagmotifs":
    	from tronn.run_bagmotifs import run
    	run(args)
    elif subcommand == "ism":
    	add_model_params(args)
    	from tronn.run_ism import run
    	run(args)
        
    return None


if __name__ == '__main__':
    main()
